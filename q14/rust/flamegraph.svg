<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="323"><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.0000%" y="629" width="0.3096%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.0000%" y="613" width="0.3096%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.0000%" y="597" width="0.3096%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.0000%" y="581" width="0.3096%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.0000%" y="565" width="0.3096%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.31%)</title><rect x="0.3096%" y="373" width="0.3096%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="1"/><text x="0.5596%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.31%)</title><rect x="0.3096%" y="357" width="0.3096%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="1"/><text x="0.5596%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.31%)</title><rect x="0.3096%" y="341" width="0.3096%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="1"/><text x="0.5596%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.31%)</title><rect x="0.3096%" y="325" width="0.3096%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="1"/><text x="0.5596%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.31%)</title><rect x="0.3096%" y="309" width="0.3096%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="1"/><text x="0.5596%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.31%)</title><rect x="0.3096%" y="293" width="0.3096%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="1"/><text x="0.5596%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.31%)</title><rect x="0.3096%" y="277" width="0.3096%" height="15" fill="rgb(240,193,28)" fg:x="1" fg:w="1"/><text x="0.5596%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.31%)</title><rect x="0.3096%" y="261" width="0.3096%" height="15" fill="rgb(216,20,37)" fg:x="1" fg:w="1"/><text x="0.5596%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (1 samples, 0.31%)</title><rect x="0.3096%" y="245" width="0.3096%" height="15" fill="rgb(206,188,39)" fg:x="1" fg:w="1"/><text x="0.5596%" y="255.50"></text></g><g><title>core::ptr::write (1 samples, 0.31%)</title><rect x="0.3096%" y="229" width="0.3096%" height="15" fill="rgb(217,207,13)" fg:x="1" fg:w="1"/><text x="0.5596%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="213" width="0.3096%" height="15" fill="rgb(231,73,38)" fg:x="1" fg:w="1"/><text x="0.5596%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="197" width="0.3096%" height="15" fill="rgb(225,20,46)" fg:x="1" fg:w="1"/><text x="0.5596%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="181" width="0.3096%" height="15" fill="rgb(210,31,41)" fg:x="1" fg:w="1"/><text x="0.5596%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="165" width="0.3096%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="1"/><text x="0.5596%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="149" width="0.3096%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="1"/><text x="0.5596%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="133" width="0.3096%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="1"/><text x="0.5596%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="117" width="0.3096%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="0.5596%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="101" width="0.3096%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="0.5596%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="85" width="0.3096%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="0.5596%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="69" width="0.3096%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="0.5596%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="53" width="0.3096%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="0.5596%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="0.3096%" y="37" width="0.3096%" height="15" fill="rgb(225,111,53)" fg:x="1" fg:w="1"/><text x="0.5596%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.55%)</title><rect x="2.1672%" y="357" width="1.5480%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="5"/><text x="2.4172%" y="367.50"></text></g><g><title>rust::collatz (67 samples, 20.74%)</title><rect x="3.7152%" y="357" width="20.7430%" height="15" fill="rgb(214,148,48)" fg:x="12" fg:w="67"/><text x="3.9652%" y="367.50">rust::collatz</text></g><g><title>rust::collatz_no_cache (112 samples, 34.67%)</title><rect x="0.6192%" y="373" width="34.6749%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="112"/><text x="0.8692%" y="383.50">rust::collatz_no_cache</text></g><g><title>rust::main (35 samples, 10.84%)</title><rect x="24.4582%" y="357" width="10.8359%" height="15" fill="rgb(209,103,24)" fg:x="79" fg:w="35"/><text x="24.7082%" y="367.50">rust::main</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.31%)</title><rect x="37.1517%" y="213" width="0.3096%" height="15" fill="rgb(229,88,8)" fg:x="120" fg:w="1"/><text x="37.4017%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 1.24%)</title><rect x="37.7709%" y="197" width="1.2384%" height="15" fill="rgb(213,181,19)" fg:x="122" fg:w="4"/><text x="38.0209%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (17 samples, 5.26%)</title><rect x="36.8421%" y="261" width="5.2632%" height="15" fill="rgb(254,191,54)" fg:x="119" fg:w="17"/><text x="37.0921%" y="271.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (17 samples, 5.26%)</title><rect x="36.8421%" y="245" width="5.2632%" height="15" fill="rgb(241,83,37)" fg:x="119" fg:w="17"/><text x="37.0921%" y="255.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (17 samples, 5.26%)</title><rect x="36.8421%" y="229" width="5.2632%" height="15" fill="rgb(233,36,39)" fg:x="119" fg:w="17"/><text x="37.0921%" y="239.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (15 samples, 4.64%)</title><rect x="37.4613%" y="213" width="4.6440%" height="15" fill="rgb(226,3,54)" fg:x="121" fg:w="15"/><text x="37.7113%" y="223.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (10 samples, 3.10%)</title><rect x="39.0093%" y="197" width="3.0960%" height="15" fill="rgb(245,192,40)" fg:x="126" fg:w="10"/><text x="39.2593%" y="207.50">cor..</text></g><g><title>hashbrown::map::make_hash (23 samples, 7.12%)</title><rect x="35.9133%" y="293" width="7.1207%" height="15" fill="rgb(238,167,29)" fg:x="116" fg:w="23"/><text x="36.1633%" y="303.50">hashbrown:..</text></g><g><title>core::hash::BuildHasher::hash_one (23 samples, 7.12%)</title><rect x="35.9133%" y="277" width="7.1207%" height="15" fill="rgb(232,182,51)" fg:x="116" fg:w="23"/><text x="36.1633%" y="287.50">core::hash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.93%)</title><rect x="42.1053%" y="261" width="0.9288%" height="15" fill="rgb(231,60,39)" fg:x="136" fg:w="3"/><text x="42.3553%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (3 samples, 0.93%)</title><rect x="42.1053%" y="245" width="0.9288%" height="15" fill="rgb(208,69,12)" fg:x="136" fg:w="3"/><text x="42.3553%" y="255.50"></text></g><g><title>core::hash::Hasher::write_u64 (3 samples, 0.93%)</title><rect x="42.1053%" y="229" width="0.9288%" height="15" fill="rgb(235,93,37)" fg:x="136" fg:w="3"/><text x="42.3553%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.93%)</title><rect x="42.1053%" y="213" width="0.9288%" height="15" fill="rgb(213,116,39)" fg:x="136" fg:w="3"/><text x="42.3553%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.93%)</title><rect x="42.1053%" y="197" width="0.9288%" height="15" fill="rgb(222,207,29)" fg:x="136" fg:w="3"/><text x="42.3553%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.93%)</title><rect x="42.1053%" y="181" width="0.9288%" height="15" fill="rgb(206,96,30)" fg:x="136" fg:w="3"/><text x="42.3553%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.62%)</title><rect x="42.4149%" y="165" width="0.6192%" height="15" fill="rgb(218,138,4)" fg:x="137" fg:w="2"/><text x="42.6649%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.31%)</title><rect x="42.7245%" y="149" width="0.3096%" height="15" fill="rgb(250,191,14)" fg:x="138" fg:w="1"/><text x="42.9745%" y="159.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 2.17%)</title><rect x="65.3251%" y="245" width="2.1672%" height="15" fill="rgb(239,60,40)" fg:x="211" fg:w="7"/><text x="65.5751%" y="255.50">&lt;..</text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 2.17%)</title><rect x="65.3251%" y="229" width="2.1672%" height="15" fill="rgb(206,27,48)" fg:x="211" fg:w="7"/><text x="65.5751%" y="239.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.62%)</title><rect x="67.4923%" y="245" width="0.6192%" height="15" fill="rgb(225,35,8)" fg:x="218" fg:w="2"/><text x="67.7423%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.62%)</title><rect x="67.4923%" y="229" width="0.6192%" height="15" fill="rgb(250,213,24)" fg:x="218" fg:w="2"/><text x="67.7423%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.62%)</title><rect x="67.4923%" y="213" width="0.6192%" height="15" fill="rgb(247,123,22)" fg:x="218" fg:w="2"/><text x="67.7423%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (2 samples, 0.62%)</title><rect x="67.4923%" y="197" width="0.6192%" height="15" fill="rgb(231,138,38)" fg:x="218" fg:w="2"/><text x="67.7423%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (1 samples, 0.31%)</title><rect x="68.1115%" y="245" width="0.3096%" height="15" fill="rgb(231,145,46)" fg:x="220" fg:w="1"/><text x="68.3615%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (63 samples, 19.50%)</title><rect x="68.4211%" y="245" width="19.5046%" height="15" fill="rgb(251,118,11)" fg:x="221" fg:w="63"/><text x="68.6711%" y="255.50">hashbrown::raw::sse2::Group::ma..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (63 samples, 19.50%)</title><rect x="68.4211%" y="229" width="19.5046%" height="15" fill="rgb(217,147,25)" fg:x="221" fg:w="63"/><text x="68.6711%" y="239.50">core::core_arch::x86::sse2::_mm..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.31%)</title><rect x="87.9257%" y="245" width="0.3096%" height="15" fill="rgb(247,81,37)" fg:x="284" fg:w="1"/><text x="88.1757%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.31%)</title><rect x="87.9257%" y="229" width="0.3096%" height="15" fill="rgb(209,12,38)" fg:x="284" fg:w="1"/><text x="88.1757%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.31%)</title><rect x="87.9257%" y="213" width="0.3096%" height="15" fill="rgb(227,1,9)" fg:x="284" fg:w="1"/><text x="88.1757%" y="223.50"></text></g><g><title>rust::collatz_hash (177 samples, 54.80%)</title><rect x="35.6037%" y="357" width="54.7988%" height="15" fill="rgb(248,47,43)" fg:x="115" fg:w="177"/><text x="35.8537%" y="367.50">rust::collatz_hash</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (176 samples, 54.49%)</title><rect x="35.9133%" y="341" width="54.4892%" height="15" fill="rgb(221,10,30)" fg:x="116" fg:w="176"/><text x="36.1633%" y="351.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (176 samples, 54.49%)</title><rect x="35.9133%" y="325" width="54.4892%" height="15" fill="rgb(210,229,1)" fg:x="116" fg:w="176"/><text x="36.1633%" y="335.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (176 samples, 54.49%)</title><rect x="35.9133%" y="309" width="54.4892%" height="15" fill="rgb(222,148,37)" fg:x="116" fg:w="176"/><text x="36.1633%" y="319.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (153 samples, 47.37%)</title><rect x="43.0341%" y="293" width="47.3684%" height="15" fill="rgb(234,67,33)" fg:x="139" fg:w="153"/><text x="43.2841%" y="303.50">hashbrown::raw::RawTable&lt;T,A&gt;::get</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (153 samples, 47.37%)</title><rect x="43.0341%" y="277" width="47.3684%" height="15" fill="rgb(247,98,35)" fg:x="139" fg:w="153"/><text x="43.2841%" y="287.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (153 samples, 47.37%)</title><rect x="43.0341%" y="261" width="47.3684%" height="15" fill="rgb(247,138,52)" fg:x="139" fg:w="153"/><text x="43.2841%" y="271.50">hashbrown::raw::RawTableInner&lt;A&gt;::find_inner</text></g><g><title>rust::main (7 samples, 2.17%)</title><rect x="88.2353%" y="245" width="2.1672%" height="15" fill="rgb(213,79,30)" fg:x="285" fg:w="7"/><text x="88.4853%" y="255.50">r..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 0.31%)</title><rect x="90.4025%" y="293" width="0.3096%" height="15" fill="rgb(246,177,23)" fg:x="292" fg:w="1"/><text x="90.6525%" y="303.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 0.31%)</title><rect x="90.4025%" y="277" width="0.3096%" height="15" fill="rgb(230,62,27)" fg:x="292" fg:w="1"/><text x="90.6525%" y="287.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 0.31%)</title><rect x="90.4025%" y="261" width="0.3096%" height="15" fill="rgb(216,154,8)" fg:x="292" fg:w="1"/><text x="90.6525%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.31%)</title><rect x="90.4025%" y="245" width="0.3096%" height="15" fill="rgb(244,35,45)" fg:x="292" fg:w="1"/><text x="90.6525%" y="255.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (1 samples, 0.31%)</title><rect x="90.4025%" y="229" width="0.3096%" height="15" fill="rgb(251,115,12)" fg:x="292" fg:w="1"/><text x="90.6525%" y="239.50"></text></g><g><title>hashbrown::map::make_insert_hash (3 samples, 0.93%)</title><rect x="90.4025%" y="325" width="0.9288%" height="15" fill="rgb(240,54,50)" fg:x="292" fg:w="3"/><text x="90.6525%" y="335.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.93%)</title><rect x="90.4025%" y="309" width="0.9288%" height="15" fill="rgb(233,84,52)" fg:x="292" fg:w="3"/><text x="90.6525%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.62%)</title><rect x="90.7121%" y="293" width="0.6192%" height="15" fill="rgb(207,117,47)" fg:x="293" fg:w="2"/><text x="90.9621%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u64&gt;::hash (2 samples, 0.62%)</title><rect x="90.7121%" y="277" width="0.6192%" height="15" fill="rgb(249,43,39)" fg:x="293" fg:w="2"/><text x="90.9621%" y="287.50"></text></g><g><title>core::hash::Hasher::write_u64 (2 samples, 0.62%)</title><rect x="90.7121%" y="261" width="0.6192%" height="15" fill="rgb(209,38,44)" fg:x="293" fg:w="2"/><text x="90.9621%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.62%)</title><rect x="90.7121%" y="245" width="0.6192%" height="15" fill="rgb(236,212,23)" fg:x="293" fg:w="2"/><text x="90.9621%" y="255.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.62%)</title><rect x="90.7121%" y="229" width="0.6192%" height="15" fill="rgb(242,79,21)" fg:x="293" fg:w="2"/><text x="90.9621%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.62%)</title><rect x="90.7121%" y="213" width="0.6192%" height="15" fill="rgb(211,96,35)" fg:x="293" fg:w="2"/><text x="90.9621%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (11 samples, 3.41%)</title><rect x="91.3313%" y="309" width="3.4056%" height="15" fill="rgb(253,215,40)" fg:x="295" fg:w="11"/><text x="91.5813%" y="319.50">has..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (11 samples, 3.41%)</title><rect x="91.3313%" y="293" width="3.4056%" height="15" fill="rgb(211,81,21)" fg:x="295" fg:w="11"/><text x="91.5813%" y="303.50">cor..</text></g><g><title>core::ptr::write (11 samples, 3.41%)</title><rect x="91.3313%" y="277" width="3.4056%" height="15" fill="rgb(208,190,38)" fg:x="295" fg:w="11"/><text x="91.5813%" y="287.50">cor..</text></g><g><title>[unknown] (3 samples, 0.93%)</title><rect x="93.8080%" y="261" width="0.9288%" height="15" fill="rgb(235,213,38)" fg:x="303" fg:w="3"/><text x="94.0580%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.93%)</title><rect x="93.8080%" y="245" width="0.9288%" height="15" fill="rgb(237,122,38)" fg:x="303" fg:w="3"/><text x="94.0580%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.93%)</title><rect x="93.8080%" y="229" width="0.9288%" height="15" fill="rgb(244,218,35)" fg:x="303" fg:w="3"/><text x="94.0580%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.93%)</title><rect x="93.8080%" y="213" width="0.9288%" height="15" fill="rgb(240,68,47)" fg:x="303" fg:w="3"/><text x="94.0580%" y="223.50"></text></g><g><title>[unknown] (3 samples, 0.93%)</title><rect x="93.8080%" y="197" width="0.9288%" height="15" fill="rgb(210,16,53)" fg:x="303" fg:w="3"/><text x="94.0580%" y="207.50"></text></g><g><title>[unknown] (2 samples, 0.62%)</title><rect x="94.1176%" y="181" width="0.6192%" height="15" fill="rgb(235,124,12)" fg:x="304" fg:w="2"/><text x="94.3676%" y="191.50"></text></g><g><title>[unknown] (2 samples, 0.62%)</title><rect x="94.1176%" y="165" width="0.6192%" height="15" fill="rgb(224,169,11)" fg:x="304" fg:w="2"/><text x="94.3676%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.62%)</title><rect x="94.1176%" y="149" width="0.6192%" height="15" fill="rgb(250,166,2)" fg:x="304" fg:w="2"/><text x="94.3676%" y="159.50"></text></g><g><title>[unknown] (2 samples, 0.62%)</title><rect x="94.1176%" y="133" width="0.6192%" height="15" fill="rgb(242,216,29)" fg:x="304" fg:w="2"/><text x="94.3676%" y="143.50"></text></g><g><title>rust::hash_cache (193 samples, 59.75%)</title><rect x="35.2941%" y="373" width="59.7523%" height="15" fill="rgb(230,116,27)" fg:x="114" fg:w="193"/><text x="35.5441%" y="383.50">rust::hash_cache</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (15 samples, 4.64%)</title><rect x="90.4025%" y="357" width="4.6440%" height="15" fill="rgb(228,99,48)" fg:x="292" fg:w="15"/><text x="90.6525%" y="367.50">std::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (15 samples, 4.64%)</title><rect x="90.4025%" y="341" width="4.6440%" height="15" fill="rgb(253,11,6)" fg:x="292" fg:w="15"/><text x="90.6525%" y="351.50">hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (12 samples, 3.72%)</title><rect x="91.3313%" y="325" width="3.7152%" height="15" fill="rgb(247,143,39)" fg:x="295" fg:w="12"/><text x="91.5813%" y="335.50">hash..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.31%)</title><rect x="94.7368%" y="309" width="0.3096%" height="15" fill="rgb(236,97,10)" fg:x="306" fg:w="1"/><text x="94.9868%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.31%)</title><rect x="95.0464%" y="357" width="0.3096%" height="15" fill="rgb(233,208,19)" fg:x="307" fg:w="1"/><text x="95.2964%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.31%)</title><rect x="95.0464%" y="341" width="0.3096%" height="15" fill="rgb(216,164,2)" fg:x="307" fg:w="1"/><text x="95.2964%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.31%)</title><rect x="95.0464%" y="325" width="0.3096%" height="15" fill="rgb(220,129,5)" fg:x="307" fg:w="1"/><text x="95.2964%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.31%)</title><rect x="95.3560%" y="357" width="0.3096%" height="15" fill="rgb(242,17,10)" fg:x="308" fg:w="1"/><text x="95.6060%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.62%)</title><rect x="95.6656%" y="357" width="0.6192%" height="15" fill="rgb(242,107,0)" fg:x="309" fg:w="2"/><text x="95.9156%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="341" width="0.3096%" height="15" fill="rgb(251,28,31)" fg:x="310" fg:w="1"/><text x="96.2252%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="325" width="0.3096%" height="15" fill="rgb(233,223,10)" fg:x="310" fg:w="1"/><text x="96.2252%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="309" width="0.3096%" height="15" fill="rgb(215,21,27)" fg:x="310" fg:w="1"/><text x="96.2252%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="293" width="0.3096%" height="15" fill="rgb(232,23,21)" fg:x="310" fg:w="1"/><text x="96.2252%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="277" width="0.3096%" height="15" fill="rgb(244,5,23)" fg:x="310" fg:w="1"/><text x="96.2252%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="261" width="0.3096%" height="15" fill="rgb(226,81,46)" fg:x="310" fg:w="1"/><text x="96.2252%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="245" width="0.3096%" height="15" fill="rgb(247,70,30)" fg:x="310" fg:w="1"/><text x="96.2252%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="229" width="0.3096%" height="15" fill="rgb(212,68,19)" fg:x="310" fg:w="1"/><text x="96.2252%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="95.9752%" y="213" width="0.3096%" height="15" fill="rgb(240,187,13)" fg:x="310" fg:w="1"/><text x="96.2252%" y="223.50"></text></g><g><title>rust::collatz_vec (5 samples, 1.55%)</title><rect x="96.2848%" y="357" width="1.5480%" height="15" fill="rgb(223,113,26)" fg:x="311" fg:w="5"/><text x="96.5348%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::ne (4 samples, 1.24%)</title><rect x="96.5944%" y="341" width="1.2384%" height="15" fill="rgb(206,192,2)" fg:x="312" fg:w="4"/><text x="96.8444%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for u64&gt;::ne (4 samples, 1.24%)</title><rect x="96.5944%" y="325" width="1.2384%" height="15" fill="rgb(241,108,4)" fg:x="312" fg:w="4"/><text x="96.8444%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="97.5232%" y="309" width="0.3096%" height="15" fill="rgb(247,173,49)" fg:x="315" fg:w="1"/><text x="97.7732%" y="319.50"></text></g><g><title>__libc_start_main_impl (316 samples, 97.83%)</title><rect x="0.3096%" y="629" width="97.8328%" height="15" fill="rgb(224,114,35)" fg:x="1" fg:w="316"/><text x="0.5596%" y="639.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (316 samples, 97.83%)</title><rect x="0.3096%" y="613" width="97.8328%" height="15" fill="rgb(245,159,27)" fg:x="1" fg:w="316"/><text x="0.5596%" y="623.50">__libc_start_call_main</text></g><g><title>main (316 samples, 97.83%)</title><rect x="0.3096%" y="597" width="97.8328%" height="15" fill="rgb(245,172,44)" fg:x="1" fg:w="316"/><text x="0.5596%" y="607.50">main</text></g><g><title>std::rt::lang_start_internal (316 samples, 97.83%)</title><rect x="0.3096%" y="581" width="97.8328%" height="15" fill="rgb(236,23,11)" fg:x="1" fg:w="316"/><text x="0.5596%" y="591.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (316 samples, 97.83%)</title><rect x="0.3096%" y="565" width="97.8328%" height="15" fill="rgb(205,117,38)" fg:x="1" fg:w="316"/><text x="0.5596%" y="575.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (316 samples, 97.83%)</title><rect x="0.3096%" y="549" width="97.8328%" height="15" fill="rgb(237,72,25)" fg:x="1" fg:w="316"/><text x="0.5596%" y="559.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (316 samples, 97.83%)</title><rect x="0.3096%" y="533" width="97.8328%" height="15" fill="rgb(244,70,9)" fg:x="1" fg:w="316"/><text x="0.5596%" y="543.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (316 samples, 97.83%)</title><rect x="0.3096%" y="517" width="97.8328%" height="15" fill="rgb(217,125,39)" fg:x="1" fg:w="316"/><text x="0.5596%" y="527.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (316 samples, 97.83%)</title><rect x="0.3096%" y="501" width="97.8328%" height="15" fill="rgb(235,36,10)" fg:x="1" fg:w="316"/><text x="0.5596%" y="511.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (316 samples, 97.83%)</title><rect x="0.3096%" y="485" width="97.8328%" height="15" fill="rgb(251,123,47)" fg:x="1" fg:w="316"/><text x="0.5596%" y="495.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (316 samples, 97.83%)</title><rect x="0.3096%" y="469" width="97.8328%" height="15" fill="rgb(221,13,13)" fg:x="1" fg:w="316"/><text x="0.5596%" y="479.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (316 samples, 97.83%)</title><rect x="0.3096%" y="453" width="97.8328%" height="15" fill="rgb(238,131,9)" fg:x="1" fg:w="316"/><text x="0.5596%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (316 samples, 97.83%)</title><rect x="0.3096%" y="437" width="97.8328%" height="15" fill="rgb(211,50,8)" fg:x="1" fg:w="316"/><text x="0.5596%" y="447.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (316 samples, 97.83%)</title><rect x="0.3096%" y="421" width="97.8328%" height="15" fill="rgb(245,182,24)" fg:x="1" fg:w="316"/><text x="0.5596%" y="431.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (316 samples, 97.83%)</title><rect x="0.3096%" y="405" width="97.8328%" height="15" fill="rgb(242,14,37)" fg:x="1" fg:w="316"/><text x="0.5596%" y="415.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust::main (316 samples, 97.83%)</title><rect x="0.3096%" y="389" width="97.8328%" height="15" fill="rgb(246,228,12)" fg:x="1" fg:w="316"/><text x="0.5596%" y="399.50">rust::main</text></g><g><title>rust::vec_cache (10 samples, 3.10%)</title><rect x="95.0464%" y="373" width="3.0960%" height="15" fill="rgb(213,55,15)" fg:x="307" fg:w="10"/><text x="95.2964%" y="383.50">rus..</text></g><g><title>rust::main (1 samples, 0.31%)</title><rect x="97.8328%" y="357" width="0.3096%" height="15" fill="rgb(209,9,3)" fg:x="316" fg:w="1"/><text x="98.0828%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.1424%" y="613" width="0.3096%" height="15" fill="rgb(230,59,30)" fg:x="317" fg:w="1"/><text x="98.3924%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.1424%" y="597" width="0.3096%" height="15" fill="rgb(209,121,21)" fg:x="317" fg:w="1"/><text x="98.3924%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.1424%" y="581" width="0.3096%" height="15" fill="rgb(220,109,13)" fg:x="317" fg:w="1"/><text x="98.3924%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.1424%" y="565" width="0.3096%" height="15" fill="rgb(232,18,1)" fg:x="317" fg:w="1"/><text x="98.3924%" y="575.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.31%)</title><rect x="98.4520%" y="597" width="0.3096%" height="15" fill="rgb(215,41,42)" fg:x="318" fg:w="1"/><text x="98.7020%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.4520%" y="581" width="0.3096%" height="15" fill="rgb(224,123,36)" fg:x="318" fg:w="1"/><text x="98.7020%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.4520%" y="565" width="0.3096%" height="15" fill="rgb(240,125,3)" fg:x="318" fg:w="1"/><text x="98.7020%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.4520%" y="549" width="0.3096%" height="15" fill="rgb(205,98,50)" fg:x="318" fg:w="1"/><text x="98.7020%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.4520%" y="533" width="0.3096%" height="15" fill="rgb(205,185,37)" fg:x="318" fg:w="1"/><text x="98.7020%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.4520%" y="517" width="0.3096%" height="15" fill="rgb(238,207,15)" fg:x="318" fg:w="1"/><text x="98.7020%" y="527.50"></text></g><g><title>_dl_start_final (2 samples, 0.62%)</title><rect x="98.4520%" y="613" width="0.6192%" height="15" fill="rgb(213,199,42)" fg:x="318" fg:w="2"/><text x="98.7020%" y="623.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.31%)</title><rect x="98.7616%" y="597" width="0.3096%" height="15" fill="rgb(235,201,11)" fg:x="319" fg:w="1"/><text x="99.0116%" y="607.50"></text></g><g><title>dl_platform_init (1 samples, 0.31%)</title><rect x="98.7616%" y="581" width="0.3096%" height="15" fill="rgb(207,46,11)" fg:x="319" fg:w="1"/><text x="99.0116%" y="591.50"></text></g><g><title>init_cpu_features (1 samples, 0.31%)</title><rect x="98.7616%" y="565" width="0.3096%" height="15" fill="rgb(241,35,35)" fg:x="319" fg:w="1"/><text x="99.0116%" y="575.50"></text></g><g><title>get_cet_status (1 samples, 0.31%)</title><rect x="98.7616%" y="549" width="0.3096%" height="15" fill="rgb(243,32,47)" fg:x="319" fg:w="1"/><text x="99.0116%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.7616%" y="533" width="0.3096%" height="15" fill="rgb(247,202,23)" fg:x="319" fg:w="1"/><text x="99.0116%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.7616%" y="517" width="0.3096%" height="15" fill="rgb(219,102,11)" fg:x="319" fg:w="1"/><text x="99.0116%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="98.7616%" y="501" width="0.3096%" height="15" fill="rgb(243,110,44)" fg:x="319" fg:w="1"/><text x="99.0116%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.0712%" y="597" width="0.3096%" height="15" fill="rgb(222,74,54)" fg:x="320" fg:w="1"/><text x="99.3212%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.0712%" y="581" width="0.3096%" height="15" fill="rgb(216,99,12)" fg:x="320" fg:w="1"/><text x="99.3212%" y="591.50"></text></g><g><title>elf_dynamic_do_Rela (2 samples, 0.62%)</title><rect x="99.0712%" y="613" width="0.6192%" height="15" fill="rgb(226,22,26)" fg:x="320" fg:w="2"/><text x="99.3212%" y="623.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.31%)</title><rect x="99.3808%" y="597" width="0.3096%" height="15" fill="rgb(217,163,10)" fg:x="321" fg:w="1"/><text x="99.6308%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="581" width="0.3096%" height="15" fill="rgb(213,25,53)" fg:x="321" fg:w="1"/><text x="99.6308%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="565" width="0.3096%" height="15" fill="rgb(252,105,26)" fg:x="321" fg:w="1"/><text x="99.6308%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="549" width="0.3096%" height="15" fill="rgb(220,39,43)" fg:x="321" fg:w="1"/><text x="99.6308%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="533" width="0.3096%" height="15" fill="rgb(229,68,48)" fg:x="321" fg:w="1"/><text x="99.6308%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="517" width="0.3096%" height="15" fill="rgb(252,8,32)" fg:x="321" fg:w="1"/><text x="99.6308%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="501" width="0.3096%" height="15" fill="rgb(223,20,43)" fg:x="321" fg:w="1"/><text x="99.6308%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="485" width="0.3096%" height="15" fill="rgb(229,81,49)" fg:x="321" fg:w="1"/><text x="99.6308%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="469" width="0.3096%" height="15" fill="rgb(236,28,36)" fg:x="321" fg:w="1"/><text x="99.6308%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="453" width="0.3096%" height="15" fill="rgb(249,185,26)" fg:x="321" fg:w="1"/><text x="99.6308%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.3808%" y="437" width="0.3096%" height="15" fill="rgb(249,174,33)" fg:x="321" fg:w="1"/><text x="99.6308%" y="447.50"></text></g><g><title>all (323 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="323"/><text x="0.2500%" y="687.50"></text></g><g><title>rust (323 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="323"/><text x="0.2500%" y="671.50">rust</text></g><g><title>_start (323 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="323"/><text x="0.2500%" y="655.50">_start</text></g><g><title>_dl_start (6 samples, 1.86%)</title><rect x="98.1424%" y="629" width="1.8576%" height="15" fill="rgb(230,49,44)" fg:x="317" fg:w="6"/><text x="98.3924%" y="639.50">_..</text></g><g><title>rtld_timer_start (1 samples, 0.31%)</title><rect x="99.6904%" y="613" width="0.3096%" height="15" fill="rgb(229,67,23)" fg:x="322" fg:w="1"/><text x="99.9404%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="597" width="0.3096%" height="15" fill="rgb(249,83,47)" fg:x="322" fg:w="1"/><text x="99.9404%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="581" width="0.3096%" height="15" fill="rgb(215,43,3)" fg:x="322" fg:w="1"/><text x="99.9404%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="565" width="0.3096%" height="15" fill="rgb(238,154,13)" fg:x="322" fg:w="1"/><text x="99.9404%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="549" width="0.3096%" height="15" fill="rgb(219,56,2)" fg:x="322" fg:w="1"/><text x="99.9404%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="533" width="0.3096%" height="15" fill="rgb(233,0,4)" fg:x="322" fg:w="1"/><text x="99.9404%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="517" width="0.3096%" height="15" fill="rgb(235,30,7)" fg:x="322" fg:w="1"/><text x="99.9404%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="501" width="0.3096%" height="15" fill="rgb(250,79,13)" fg:x="322" fg:w="1"/><text x="99.9404%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="485" width="0.3096%" height="15" fill="rgb(211,146,34)" fg:x="322" fg:w="1"/><text x="99.9404%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="469" width="0.3096%" height="15" fill="rgb(228,22,38)" fg:x="322" fg:w="1"/><text x="99.9404%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="453" width="0.3096%" height="15" fill="rgb(235,168,5)" fg:x="322" fg:w="1"/><text x="99.9404%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="437" width="0.3096%" height="15" fill="rgb(221,155,16)" fg:x="322" fg:w="1"/><text x="99.9404%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="421" width="0.3096%" height="15" fill="rgb(215,215,53)" fg:x="322" fg:w="1"/><text x="99.9404%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.31%)</title><rect x="99.6904%" y="405" width="0.3096%" height="15" fill="rgb(223,4,10)" fg:x="322" fg:w="1"/><text x="99.9404%" y="415.50"></text></g></svg></svg>